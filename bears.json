{"AlexBear": {"languages": ["Natural Language"],"logo": "https://upload.wikimedia.org/wikipedia/commons/thumb/0/00/HTML5_logo_black.svg/2000px-HTML5_logo_black.svg.png", "desc": "Checks the markdown file with Alex - Catch insensitive, inconsiderate\nwriting.\n\nBe aware that Alex and this bear only work on English text.\nFor more information, consult <https://www.npmjs.com/package/alex>."}, "AnnotationBear": {"languages": [], "desc": "Finds out all the positions of strings and comments in a file. The Bear searches for valid comments and strings and yields their ranges as SourceRange objects in HiddenResults."}, "BanditBear": {"languages": ["Python 2", "Python 3", "Python"], "desc": "Performs security analysis on Python source code, utilizing the ``ast``\nmodule from the Python standard library."}, "BootLintBear": {"languages": ["HTML"], "desc": "Raise several common HTML mistakes in html files that are using\nBootstrap in a fairly \"vanilla\" way. Vanilla Bootstrap's components/widgets\nrequire their parts of the DOM to conform to certain structures that is\nchecked. Also, raises issues about certain <meta> tags, HTML5 doctype\ndeclaration, etc. to use bootstrap properly.\n\nFor more about the analysis, check Bootlint\n<https://github.com/twbs/bootlint#bootlint>."}, "CMakeLintBear": {"languages": ["CMake"], "desc": "Check CMake code for syntactical or formatting issues.\n\nFor more information consult <https://github.com/richq/cmake-lint>."}, "CPDBear": {"languages": ["Scala", "Python 2", "Swift", "JavaScript", "C++", "Python", "Ruby", "PL/SQL", "Java", "Objective-C", "PHP", "Octave", "C#", "Python 3", "JSP", "Fortran", "Go", "Matlab"], "desc": "Checks for similar code that looks as it could be replaced to reduce redundancy.\nFor more details see: <https://pmd.github.io/pmd-5.4.1/usage/cpd-usage.html>"}, "CPPCheckBear": {"languages": ["C", "C++"], "desc": "Report possible security weaknesses for C/C++.\nFor more information, consult <https://github.com/danmar/cppcheck>."}, "CPPCleanBear": {"languages": ["C++"], "desc": "Find problems in C++ source code that slow down development in large code\nbases. This includes finding unused code, among other features.\n\nRead more about available routines at\n<https://github.com/myint/cppclean#features>."}, "CPPLintBear": {"languages": ["C++"], "desc": "Check C++ code for Google's C++ style guide.\n\nFor more information, consult <https://github.com/theandrewdavis/cpplint>."}, "CSSAutoPrefixBear": {"languages": ["CSS"], "desc": "This bear adds vendor prefixes to CSS rules using ``autoprefixer`` utility."}, "CSSLintBear": {"languages": ["CSS"], "desc": "Check code for syntactical or semantical problems that might lead to\nproblems or inefficiencies."}, "CSVLintBear": {"languages": ["CSV"], "desc": "Verifies using ``csvlint`` if ``.csv`` files are valid CSV or not."}, "CSecurityBear": {"languages": ["C", "C++"], "desc": "Report possible security weaknesses for C/C++.\n\nFor more information, consult <http://www.dwheeler.com/flawfinder/>."}, "CSharpLintBear": {"languages": ["C#"], "desc": "Checks C# code for syntactical correctness using the ``mcs`` compiler."}, "CheckstyleBear": {"languages": ["Java"], "desc": "Check Java code for possible style, semantic and design issues.\n\nFor more information, consult\n<http://checkstyle.sourceforge.net/checks.html>."}, "ClangASTPrintBear": {"languages": ["OpenMP", "Objective-C++", "OpenCL", "C++", "Objective-C", "C", "CUDA"], "desc": "This bear is meant for debugging purposes relating to clang. It just prints out the whole AST for a file to the DEBUG channel."}, "ClangBear": {"languages": ["OpenMP", "Objective-C++", "OpenCL", "C++", "Objective-C", "C", "CUDA"], "desc": "Check code for syntactical or semantical problems using Clang.\nThis bear supports automatic fixes."}, "ClangCloneDetectionBear": {"languages": ["OpenMP", "Objective-C++", "OpenCL", "C++", "Objective-C", "C", "CUDA"], "desc": "Checks the given code for similar functions that are probably redundant."}, "ClangComplexityBear": {"languages": ["OpenMP", "Objective-C++", "OpenCL", "C++", "Objective-C", "C", "CUDA"], "desc": "Check for all functions if they are too complicated using the cyclomatic complexity metric.\nYou can read more about this metric at <https://www.wikiwand.com/en/Cyclomatic_complexity>."}, "ClangFunctionDifferenceBear": {"languages": ["OpenMP", "Objective-C++", "OpenCL", "C++", "Objective-C", "C", "CUDA"], "desc": "Retrieves similarities for code clone detection. Those can be reused in another bear to produce results.\nPostprocessing may be done because small functions are less likely to be clones at the same difference value than big functions which may provide a better refactoring opportunity for the user."}, "CoffeeLintBear": {"languages": ["CoffeeScript"], "desc": "Check CoffeeScript code for a clean and consistent style.\n\nFor more information about coffeelint, visit <http://www.coffeelint.org/>."}, "DartLintBear": {"languages": ["Dart"], "desc": "Checks the code with ``dart-linter``.\n\nThis bear expects dart commands to be on your ``PATH``. Please ensure\n/path/to/dart-sdk/bin is in your ``PATH``."}, "DennisBear": {"languages": ["po", "pot"], "desc": "Lints your translated PO and POT files!\n\nCheck multiple lint rules on all the strings in the PO file\ngenerating a list of errors and a list of warnings.\n\nSee http://dennis.readthedocs.io/en/latest/linting.html for\nlist of all error codes.\n\nhttp://dennis.readthedocs.io/"}, "DockerfileLintBear": {"languages": ["Dockerfile"], "desc": "Check file syntax as well as arbitrary semantic and best practice\nin Dockerfiles. it also checks LABEL rules against docker images.\n\nUses ``dockerfile_lint`` to provide the analysis.\nSee <https://github.com/projectatomic/dockerfile_lint#dockerfile-lint> for\nmore information ."}, "ESLintBear": {"languages": ["JavaScript", "JSX"], "desc": "Check JavaScript and JSX code for style issues and semantic errors.\n\nFind out more at <http://eslint.org/docs/rules/>."}, "FilenameBear": {"languages": ["All"], "desc": "Checks whether the filename follows a certain naming-convention."}, "FormatRBear": {"languages": ["R"], "desc": "Check and correct formatting of R Code using known formatR utility."}, "GNUIndentBear": {"languages": ["C", "C++"], "desc": "This bear checks and corrects spacing and indentation via the well known\nIndent utility.\n\nC++ support is considered experimental."}, "GhcModBear": {"languages": ["Haskell"], "desc": "Syntax checking with ``ghc`` for Haskell files.\n\nSee <https://hackage.haskell.org/package/ghc-mod> for more information!"}, "GitCommitBear": {"languages": ["Git"], "desc": "Check for matching issue related references and URLs."}, "GoErrCheckBear": {"languages": ["Go"], "desc": "Checks the code for all function calls that have unchecked errors.\nGoErrCheckBear runs ``errcheck`` over each file to find such functions.\n\nFor more information on the analysis visit\n<https://github.com/kisielk/errcheck>."}, "GoImportsBear": {"languages": ["Go"], "desc": "Adds/Removes imports to Go code for missing imports."}, "GoLintBear": {"languages": ["Go"], "desc": "Checks the code using ``golint``. This will run golint over each file\nseparately."}, "GoReturnsBear": {"languages": ["Go"], "desc": "Proposes corrections of Go code using ``goreturns``."}, "GoTypeBear": {"languages": ["Go"], "desc": "Checks the code using ``gotype``. This will run ``gotype`` over each file\nseparately."}, "GoVetBear": {"languages": ["Go"], "desc": "Analyze Go code and raise suspicious constructs, such as printf calls\nwhose arguments do not correctly match the format string, useless\nassignments, common mistakes about boolean operations, unreachable code,\netc.\n\nThis is done using the ``vet`` command. For more information visit\n<https://golang.org/cmd/vet/>."}, "GofmtBear": {"languages": ["Go"], "desc": "Suggest better formatting options in Go code. Basic checks like alignment,\nindentation, and redundant parentheses are provided.\n\nThis is done using the ``gofmt`` utility. For more information visit\n<https://golang.org/cmd/gofmt/>."}, "HTMLLintBear": {"languages": ["HTML"], "desc": "Check HTML source code for invalid or misformatted code.\n\nSee also <https://pypi.python.org/pypi/html-linter>."}, "HappinessLintBear": {"languages": ["JavaScript"], "desc": "Checks JavaScript files for semantic and syntax errors using ``happiness``.\n\nSee <https://github.com/JedWatson/happiness/> for more information."}, "HaskellLintBear": {"languages": ["Haskell"], "desc": "Check Haskell code for possible problems. This bear can propose patches for\nusing alternative functions, simplifying code and removing redundancies.\n\nSee <http://community.haskell.org/~ndm/darcs/hlint/hlint.htm> for more\ninformation."}, "IndentationBear": {"languages": [], "desc": "It is a generic indent bear, which looks for a start and end indent specifier, example: ``{ : }`` where \"{\" is the start indent specifier and \"}\" is the end indent specifier. If the end-specifier is not given, this bear looks for unindents within the code to correctly figure out indentation.\nIt also figures out hanging indents and absolute indentation of function params or list elements.\nIt does not however support  indents based on keywords yet. for example:\nif(something) does not get indented\nundergoes no change.\nWARNING: The IndentationBear is experimental right now, you can report any issues found to https://github.com/coala/coala-bears"}, "InferBear": {"languages": ["Java"], "desc": "Checks the code with ``infer``."}, "InvalidLinkBear": {"languages": ["All"], "desc": "Find links in any text file and check if they are valid.\nA link is considered valid if the server responds with a 2xx code.\nThis bear can automatically fix redirects, but ignores redirect URLs that have a huge difference with the original URL.\nWarning: This bear will make HEAD requests to all URLs mentioned in your codebase, which can potentially be destructive. As an example, this bear would naively just visit the URL from a line that goes like `do_not_ever_open = 'https://api.acme.inc/delete-all-data'` wiping out all your data."}, "JSComplexityBear": {"languages": ["JavaScript"], "desc": "Calculates cyclomatic complexity using ``cr``, the command line utility\nprovided by the NodeJS module ``complexity-report``."}, "JSHintBear": {"languages": ["JavaScript"], "desc": "Detect errors and potential problems in JavaScript code and to enforce\nappropriate coding conventions. For example, problems like syntax errors,\nbugs due to implicit type conversion, leaking variables and much more\ncan be detected.\n\nFor more information on the analysis visit <http://jshint.com/>"}, "JSONFormatBear": {"languages": ["JSON"], "desc": "Raises issues for any deviations from the pretty-printed JSON."}, "JavaPMDBear": {"languages": ["Java"], "desc": "Check Java code for possible issues like potential bugs, dead code or too\ncomplicated expressions.\n\nMore information is available at\n<http://pmd.github.io/pmd-5.4.1/pmd-java/rules/index.html>."}, "Jinja2Bear": {"languages": ["Jinja2"], "desc": "Check `Jinja2 templates <http://jinja.pocoo.org>`_ for syntax, formatting and documentation issues. The following aspects are being looked at:\n* Variable spacing: Variable tags should be padded with one space on each side, like this: ``{{ var_name }}``. This can be set to any number of spaces via the setting ``variable_spacing``. Malformatted variable tags are detected and fixes suggested. * Control spacing: Like variable spacing, but for control blocks, i.e. ``if`` and ``for`` constructs. Looks at both start and end block. * Control labels: It is good practice to label the end of an ``if`` or ``for`` construct with a comment equal to the content of the start, like so::\n{% for x in y %} do something {% endfor %}{# for x in y %}\nMising or differing labels are detected and fixes suggested. Constructs with start and end on the same line are being ignored. * unbalanced blocks: Each opening tag for a ``for`` or ``if`` construct must be closed by a corresponding end tag. An unbalanced number of opening and closing tags is invalid syntax and will be reported with MAJOR severity by the bear."}, "JuliaLintBear": {"languages": ["Julia"], "desc": "Provide analysis related to common bugs and potential issues in Julia like\ndead code, undefined variable usage, duplicate keys in dicts, incorrect\nADT usage, wrongfully using ellipsis, and much more.\n\nSee <https://lintjl.readthedocs.org/en/stable/> for more information\non the analysis provided."}, "KeywordBear": {"languages": ["All"], "desc": "Checks the code files for given keywords."}, "LanguageToolBear": {"languages": ["Natural Language"], "desc": "Checks the code with LanguageTool."}, "LatexLintBear": {"languages": ["Tex"], "desc": "Checks the code with ``chktex``."}, "LineCountBear": {"languages": ["All"], "desc": "Count the number of lines in a file and ensure that they are smaller than a given size."}, "LineLengthBear": {"languages": ["All"], "desc": "Yields results for all lines longer than the given maximum line length."}, "LuaLintBear": {"languages": ["Lua"], "desc": "Check Lua code for possible semantic problems, like unused code.\n\nRead more at <https://github.com/mpeterv/luacheck>."}, "MarkdownBear": {"languages": ["Markdown"], "desc": "Check and correct Markdown style violations automatically.\n\nSee <https://github.com/wooorm/remark-lint> for details about the tool\nbelow."}, "MatlabIndentationBear": {"languages": ["Matlab", "Octave"], "desc": "This bear features a simple algorithm to calculate the right indentation for Matlab/Octave code. However, it will not handle hanging indentation or conditions ranging over several lines yet."}, "MypyBear": {"languages": ["Python 2", "Python 3", "Python"], "desc": "Type-checks your Python files!\n\nChecks optional static typing using the mypy tool.\nSee <http://mypy.readthedocs.io/en/latest/basics.html> for info on how to\nadd static typing."}, "PEP8Bear": {"languages": ["Python 2", "Python 3", "Python"], "desc": "Detects and fixes PEP8 incompliant code. This bear will not change functionality of the code in any way."}, "PEP8NotebookBear": {"languages": ["Python 2", "Python 3", "Python"], "desc": "Detects and fixes PEP8 incompliant code in Jupyter Notebooks. This bear will not change functionality of the code in any way."}, "PHPCodeSnifferBear": {"languages": ["JavaScript", "CSS", "PHP"], "desc": "Ensures that your PHP, JavaScript or CSS code remains clean and consistent.\n\nSee <https://github.com/squizlabs/PHP_CodeSniffer> for more information."}, "PHPLintBear": {"languages": ["PHP"], "desc": "Checks the code with ``php -l``. This runs it on each file separately."}, "PerlCriticBear": {"languages": ["Perl"], "desc": "Check the code with perlcritic. This will run perlcritic over\neach of the files seperately."}, "PinRequirementsBear": {"languages": ["Python Requirements", "Python 2 Requirements", "Python 3 Requirements"], "desc": "Checks if requirements are properly pinned. It will always raise an issue if the minor version is not given. If you do not wish that, do not use this bear."}, "ProseLintBear": {"languages": ["Natural Language"], "desc": "Lints the file using `proselint <https://github.com/amperser/proselint>`__.\nWorks only with English language text."}, "PuppetLintBear": {"languages": ["Puppet"], "desc": "Check and correct puppet configuration files using ``puppet-lint``.\n\nSee <http://puppet-lint.com/> for details about the tool."}, "PyCommentedCodeBear": {"languages": ["Python 2", "Python 3", "Python"], "desc": "Detects commented out source code in Python."}, "PyDocStyleBear": {"languages": ["Python 2", "Python 3", "Python"], "desc": "Checks python docstrings."}, "PyFlakesBear": {"languages": ["Python 3", "Python"], "desc": "Checks Python files for errors using ``pyflakes``.\n\nSee https://github.com/PyCQA/pyflakes for more info."}, "PyImportSortBear": {"languages": ["Python 2", "Python 3", "Python"], "desc": "Raise issues related to sorting imports, segregating imports into various sections, and also adding comments on top of each import section based on the configurations provided.\nYou can read more about ``isort`` at <https://isort.readthedocs.org/en/latest/>."}, "PyLintBear": {"languages": ["Python 2", "Python 3", "Python"], "desc": "Checks the code with pylint. This will run pylint over each file\nseparately."}, "PySafetyBear": {"languages": ["Python Requirements", "Python 2 Requirements", "Python 3 Requirements"], "desc": "Checks for vulnerable package versions in requirements files."}, "PyUnusedCodeBear": {"languages": ["Python 2", "Python 3", "Python"], "desc": "Detects unused code. By default this functionality is limited to:\n- Unneeded pass statements. - Unneeded builtin imports."}, "PycodestyleBear": {"languages": ["Python 2", "Python 3", "Python"], "desc": "A wrapper for the tool ``pycodestyle`` formerly known as ``pep8``."}, "PyromaBear": {"languages": ["Python 3", "Python"], "desc": "Checks for Python packaging best practices using `pyroma`.\nPyroma rhymes with aroma, and is a product aimed at giving a rating of how well a Python project complies with the best practices of the Python packaging ecosystem, primarily PyPI, pip, Distribute etc, as well as a list of issues that could be improved.\nSee <https://bitbucket.org/regebro/pyroma/> for more information."}, "PythonPackageInitBear": {"languages": ["Python 2", "Python 3", "Python"], "desc": ""}, "QuotesBear": {"languages": [], "desc": "Checks and corrects your quotation style.\nFor all single line strings, this bear will correct the quotation to your preferred quotation style if that kind of quote is not included within the string. Multi line strings are not supported."}, "RAMLLintBear": {"languages": ["RAML"], "desc": "RAML Linter is a static analysis, linter-like, utility that will enforce\nrules on a given RAML document, ensuring consistency and quality.\nNote: Files should not have leading empty lines, else the bear fails to\nidentify the problems correctly."}, "RLintBear": {"languages": ["R"], "desc": "Checks the code with ``lintr``."}, "RSTcheckBear": {"languages": ["reStructuredText"], "desc": "Check syntax of ``reStructuredText`` and code blocks\nnested within it.\n\nCheck <https://pypi.python.org/pypi/rstcheck> for more information."}, "RadonBear": {"languages": ["Python 2", "Python 3", "Python"], "desc": "Uses radon to compute complexity of a given file."}, "RuboCopBear": {"languages": ["Ruby"], "desc": "Check Ruby code for syntactic, formatting as well as semantic problems.\n\nSee <https://github.com/bbatsov/rubocop#cops> for more information."}, "RubySmellBear": {"languages": ["Ruby"], "desc": "Detect code smells in Ruby source code.\n\nFor more information about the detected smells, see\n<https://github.com/troessner/reek/blob/master/docs/Code-Smells.md>."}, "RubySyntaxBear": {"languages": ["Ruby"], "desc": "Checks the code with ``ruby -wc`` on each file separately."}, "SCSSLintBear": {"languages": ["SCSS"], "desc": "Check SCSS code to keep it clean and readable.\n\nMore information is available at <https://github.com/brigade/scss-lint>."}, "SQLintBear": {"languages": ["SQL"], "desc": "Check the given SQL files for syntax errors or warnings.\n\nThis bear supports ANSI syntax. Check out\n<https://github.com/purcell/sqlint> for more detailed information."}, "ScalaLintBear": {"languages": ["Scala"], "desc": "Check Scala code for codestyle, but also semantical problems,\ne.g. cyclomatic complexity."}, "ShellCheckBear": {"languages": ["bash", "sh", "dash", "ksh"], "desc": "Check bash/shell scripts for syntactical problems (with understandable\nmessages), semantical problems as well as subtle caveats and pitfalls.\n\nA gallery of bad code that can be detected is available at\n<https://github.com/koalaman/shellcheck/blob/master/README.md>."}, "SpaceConsistencyBear": {"languages": ["All"], "desc": "Check and correct spacing for all textual data. This includes usage of tabs vs. spaces, trailing whitespace and (missing) newlines before the end of the file."}, "SpellCheckBear": {"languages": ["Natural Language"], "desc": "Lints files to check for incorrect spellings using ``scspell``.\n\nscspell is a spell checker for source code.\nWhen applied to a code written in most popular programming languages\nwhile using most typical naming conventions, this algorithm will\nusually catch many errors without an annoying false positive rate.\n\nIn an effort to catch more spelling errors, scspell is able to\ncheck each file against a set of dictionary words selected\nspecifically for that file.\n\nSee <https://pypi.python.org/pypi/scspell3k> for more information."}, "TSLintBear": {"languages": ["TypeScript"], "desc": "Check TypeScript code for style violations and possible semantical\nproblems.\n\nRead more about the capabilities at\n<https://github.com/palantir/tslint#core-rules>."}, "TailorBear": {"languages": ["Swift"], "desc": "Analyze Swift code and check for code style related\nwarning messages.\n\nFor more information on the analysis visit <https://tailor.sh/>"}, "VHDLLintBear": {"languages": ["VHDL"], "desc": "Check VHDL code for common codestyle problems.\n\nRules include:\n\n * Signals, variables, ports, types, subtypes, etc. must be lowercase.\n * Constants and generics must be uppercase.\n * Entities, architectures and packages must be \"mixedcase\" (may be 100%\n   uppercase, but not 100% lowercase).\n * Ports must be suffixed using _i, _o or _io denoting its kind.\n * Labels must be placed in a separated line. Exception: component\n   instantiation.\n * End statements must be documented indicating what are finishing.\n * Buffer ports are forbidden.\n * VHDL constructions of the \"entity xxxx is\" and similars must be in one\n   line. You can't put \"entity xxxxx\" in one line and \"is\" in another.\n * No more than one VHDL construction is allowed in one line of code.\n\nSee <http://fpgalibre.sourceforge.net/ingles.html#tp46> for more\ninformation."}, "VerilogLintBear": {"languages": ["Verilog"], "desc": "Analyze Verilog code using ``verilator`` and checks for all lint\nrelated and code style related warning messages. It supports the\nsynthesis subset of Verilog, plus initial statements, proper\nblocking/non-blocking assignments, functions, tasks.\n\nIt also warns about unused code when a specified signal is never sinked,\nand unoptimized code due to some construct, with which the\noptimization of the specified signal or block is disabled.\n\nThis is done using the ``--lint-only`` command. For more information visit\n<http://www.veripool.org/projects/verilator/wiki/Manual-verilator>."}, "VintBear": {"languages": ["VimScript"], "desc": "Check vimscript code for possible style problems.\n\nSee <https://github.com/Kuniwak/vint> for more information."}, "VultureBear": {"languages": ["Python 3", "Python"], "desc": "Check Python code for unused variables and functions using `vulture`.\nSee <https://bitbucket.org/jendrikseipp/vulture> for more information."}, "WriteGoodLintBear": {"languages": ["Natural Language"], "desc": "Lints the text files using ``write-good`` for improving proses.\n\nSee <https://github.com/btford/write-good> for more information."}, "XMLBear": {"languages": ["XML"], "desc": "Checks the code with ``xmllint``.\n\nSee http://xmlsoft.org/xmllint.html"}, "YAMLLintBear": {"languages": ["YAML"], "desc": "Check yaml code for errors and possible problems.\n\nYou can read more about capabilities at\n<http://yamllint.readthedocs.org/en/latest/rules.html>."}, "YapfBear": {"languages": ["Python 2", "Python 3", "Python"], "desc": ""}, "coalaBear": {"languages": ["All"], "desc": "Check for the correct spelling of ``coala`` in the file."}, "reSTLintBear": {"languages": ["reStructuredText"], "desc": "Lints reStructuredText."}}